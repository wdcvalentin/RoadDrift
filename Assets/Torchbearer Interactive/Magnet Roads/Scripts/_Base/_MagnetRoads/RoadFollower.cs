// ************************************************************************
// Copyright (C) Torchbearer Interactive, Ltd. - All Rights Reserved
//
// Unauthorized copying of this file, via any medium is strictly prohibited
// proprietary and confidential
// 
// Written by: Jonathan H Langley - jon@tbinteractive.co.uk, 2017
// ************************************************************************

// This code acts as an exemplar implementation of a vehicle able to make use of 
// pathways generated by the SplineRoads.

using UnityEngine;

#if UNITY_EDITOR
using UnityEditor; 
#endif

/// <summary>
/// MagnetRoads (base)
/// </summary>
namespace MagnetRoads
{
    /// <summary>
    /// MagnetRoads (base)
    /// </summary>
    [ExecuteInEditMode]
    [AddComponentMenu("")] [RequireComponent(typeof(MeshFilter))] [RequireComponent(typeof(MeshRenderer))]
    public class RoadFollower : MonoBehaviour
    {
        // private member variables
        /// <summary>
        /// The route to follow
        /// </summary>
        private Vector3[] _route;

        /// <summary>
        /// The target vector
        /// </summary>
        private Vector3 _target;

        /// <summary>
        /// Follower speed
        /// </summary>
        private float _speed;

        /// <summary>
        /// Current route index
        /// </summary>
        private int _index;

        // Constructor
        /// <summary>
        /// Follower intitalization method
        /// </summary>
        /// <param name="route">The route to follow</param>
        /// <param name="speed">Follower speed</param>
        public void SetupRoadFollower(Vector3[] route, float speed)
        {
            _route = route;
            _speed = speed;
            _index = 0;
            transform.position = _route[0];
            transform.LookAt(route[1]);
            gameObject.name = "(DEBUG) Road Follower";
        }

        // Per frame update
        /// <summary>
        /// Follower per-frame update loop
        /// </summary>
        private void Update()
        {
			#if UNITY_EDITOR
            if (EditorApplication.isPlayingOrWillChangePlaymode)
            {
                DestroyImmediate(gameObject);
                return;
            }
            FollowRoad();
			#endif
        }

		#if UNITY_EDITOR
        // In-editor only update
        /// <summary>
        /// Follower in-editor update loop
        /// </summary>
        private void EditorUpdate()
        {
            FollowRoad();
        }

        // On enable
        /// <summary>
        /// Update OnEnable
        /// </summary>
        private void OnEnable()
        {
            EditorApplication.update += EditorUpdate;
        }

        // On disable
        /// <summary>
        /// Update OnDisable
        /// </summary>
        private void OnDisable()
        {
            EditorApplication.update -= EditorUpdate;
        }
		#endif

        // Handle road follower movement
        /// <summary>
        /// Translate and align the follower along the road
        /// </summary>
        private void FollowRoad()
        {
            transform.Translate(_speed * Vector3.forward * Time.deltaTime);
            if (Vector3.Distance(transform.position, _route[_index]) < 0.2f)
            {
                if (_index < _route.Length - 1)
                {
                    _index++;
                }
                else
                {
                    DestroyImmediate(gameObject);
                    return;
                }
            }
            transform.LookAt(_route[_index]);
        }
    }
}